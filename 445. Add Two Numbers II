/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head)
    {
        ListNode* curr = head;
        ListNode* prev = NULL;
        ListNode* Next = NULL;

        while(curr != NULL)
        {
            Next = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = Next;
        }

        return prev;
    }
    void insertAtTail(ListNode* &head, ListNode* &tail, int d)
    {
        ListNode* temp = new ListNode(d);
        
        if(head == NULL)
        {
            head = temp;
            tail = temp;
        }
        else
        {
            tail -> next = temp;
            tail = temp;
        }
    }

    ListNode* add(ListNode* first, ListNode* second)
    {
        if(first == NULL)
            return second;
        if(second == NULL)
            return first;
        
        ListNode* ansHead = NULL;
        ListNode* ansTail = NULL;
        int carry = 0;

        while(first != NULL || second != NULL || carry != 0)
        {
            int val1 = 0, val2 = 0;
            if(first != NULL)
                val1 = first -> val;
            if(second != NULL)
                val2 = second -> val;

            int sum = val1 + val2 + carry;
            int digit = sum % 10;

            insertAtTail(ansHead, ansTail, digit);

            carry = sum / 10;

            if(first != NULL)
                first = first -> next;
            if(second != NULL)
                second = second -> next;
        }

        return ansHead;
    }


    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        //reverse the given linked lists
        l1 = reverse(l1);
        l2 = reverse(l2);

        //add from left
        ListNode* ans = add(l1, l2);


        //revert the ans
        ans = reverse(ans);


        return ans;
        
    }
};
