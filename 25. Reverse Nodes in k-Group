/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    int length(ListNode* head){
        int cnt = 0;
        while(head != NULL){
            head = head -> next;
            cnt++;
        }
        return cnt;
    }


    ListNode* reverseKGroup(ListNode* head, int k) {
        //base case
        if(head == NULL)
        {
            return head;
        }

        int len = length(head);
        if(k > len)
            return head;
        
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* forward = NULL;
        int cnt = 0;

        while(cnt < k && curr != NULL)
        {
            forward = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = forward;
            cnt++;
        }

        if(forward != NULL)
        {
            head -> next = reverseKGroup(forward, k);
        }

        return prev;
    }
};
