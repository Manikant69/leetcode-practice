class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        for(int i=0; i<matrix.size(); i++)
        {
            int s = 0, e = matrix[i].size()-1;
            int mid = s + (e - s)/2;
            while(s<=e)
            {
                if(matrix[i][mid]==target)
                    return true;
                else if ( matrix[i][mid]> target)
                    e = mid - 1;
                else
                    s = mid + 1;

                mid = s + (e - s)/2;
            }
        }

        return false;
    }
};


/* second approach  TC : O(m + n) */

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        int n = matrix.size();
        int m = matrix[0].size();

        //we are comparing from right top values because from top to bottom all elements are greater and right to left all are smaller  
        int row = 0, col = m - 1;

        while(row < n && col >= 0)
        {
            if(target == matrix[row][col])
            {
                return true;
            }
            else if(target > matrix[row][col])
            {
                row++;
            }
            else{
                col--;
            }
        }

        return false;
    }
};
