class Solution {
private:
    vector<int> previousSmallerElement(vector<int> arr, int n)
    {
        vector<int> ans(n);
        stack<int> s;
        s.push(-1);

        for(int i=0; i<n; i++)
        {
            int currIndex = i;

            while(s.top() != -1 && arr[s.top()] >= arr[currIndex])
            {
                s.pop();
            }

            ans[i] = s.top();
            s.push(currIndex);
        }

        return ans;
    }

    vector<int> nextSmallerElement(vector<int> arr, int n)
    {
        vector<int> ans(n);
        stack<int> s;
        s.push(-1);

        for(int i=n-1; i>=0; i--)
        {
            int currIndex = i;

            while(s.top() != -1 && arr[s.top()] >= arr[currIndex])
            {
                s.pop();
            }

            ans[i] = s.top();
            s.push(currIndex);
        }

        return ans;
    }


public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();

        vector<int> prev(n);
        prev = previousSmallerElement(heights, n);

        vector<int> next(n);
        next = nextSmallerElement(heights, n);

        int area = 0;

        for(int i = 0; i<n; i++)
        {
            int l = heights[i];
            if(next[i] == -1)
            {
                next[i] = n;
            }

            int b = next[i] - prev[i] - 1;

            int newArea = l * b;

            area = max(newArea, area);

        }
        return area;
    }
};
